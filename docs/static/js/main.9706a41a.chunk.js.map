{"version":3,"sources":["components/AppHeader.module.css","components/UseCache.module.css","logo.svg","components/AppHeader.tsx","components/UseCache.tsx","App.tsx","serviceworkers/serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["module","exports","AppHeader","className","styles","main","src","logo","alt","UseCache","useState","isEnabled","setIsEnabled","useEffect","document","title","button","onClick","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","scope","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"wGACAA,EAAOC,QAAU,CAAC,OAAS,yBAAyB,QAAU,UAAU,kBAAkB,OAAO,KAAO,wBAAwB,KAAO,wBAAwB,KAAO,wBAAwB,YAAY,+B,iBCA1MD,EAAOC,QAAU,CAAC,QAAU,0BAA4B,iBAAiB,wGAAwG,MAAQ,wBAA0B,eAAe,+CAA+C,OAAS,wE,gJCD3Q,MAA0B,iC,OCM5BC,EAAqC,WAE9C,OACE,yBAAQC,UAAWC,IAAOC,KAA1B,UACE,qBAAKC,IAAKC,EAAMJ,UAAWC,IAAOG,KAAMC,IAAI,SAC5C,cAAC,EAAD,Q,uBCPKC,EAAoC,WAAO,IAAD,EACnBC,oBAAS,GADU,mBAC9CC,EAD8C,KACnCC,EADmC,KAGrDC,qBAAU,WAERC,SAASC,MAAT,iBAA2BJ,EAAY,UAAY,WAAnD,QASF,OACI,wBAAQR,UAAWC,IAAOY,OAAQC,QAPlB,WAClBL,GAAcD,IAMZ,2BCJSO,MAXf,WACE,OACE,sBAAKf,UAAU,MAAf,UACE,cAAC,EAAD,IACA,qBAAKA,UAAU,iBCIfgB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DA8CnC,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,EAAO,CAAEK,MAAO,OACzBC,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfV,UAAUC,cAAcU,YAI1BC,QAAQC,IACN,+GAKEd,GAAUA,EAAOe,UACnBf,EAAOe,SAAST,KAMlBO,QAAQC,IAAI,sCAGRd,GAAUA,EAAOgB,WACnBhB,EAAOgB,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MCrGjE,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1C,SAAS2C,eAAe,SFenB,SAAkB9B,GAIvB,GAAI,kBAAmBC,UAAW,CAGhC,GADkB,IAAI8B,IAAIC,GAAwBtC,OAAOC,SAASsC,MACpDC,SAAWxC,OAAOC,SAASuC,OAIvC,OAGFxC,OAAOyC,iBAAiB,QAAQ,WAC9B,IAAMpC,EAAK,UAAMiC,GAAN,qCAEPxC,IAgEV,SAAiCO,EAAeC,GAC9Ca,QAAQC,IAAIf,GAEZqC,MAAMrC,EAAO,CACXsC,QAAS,CAAE,iBAAkB,YAE5BhC,MAAK,SAACiC,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CzC,UAAUC,cAAcyC,MAAMtC,MAAK,SAACC,GAClCA,EAAasC,aAAavC,MAAK,WAC7BX,OAAOC,SAASkD,eAKpB/C,EAAgBC,EAAOC,MAG1BiB,OAAM,WACLJ,QAAQC,IAAI,oEAvFVgC,CAAwB/C,EAAOC,GAI/BC,UAAUC,cAAcyC,MAAMtC,MAAK,WACjCQ,QAAQC,IACN,+GAMJhB,EAAgBC,EAAOC,OE1C/B+C,GAKA5B,M","file":"static/js/main.9706a41a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"colors\":\"'../styles/colors.css'\",\"accents\":\"#196D79\",\"site-background\":\"#fff\",\"main\":\"AppHeader_main__HodGy\",\"link\":\"AppHeader_link__298ub\",\"logo\":\"AppHeader_logo__3WaSe\",\"logo-spin\":\"AppHeader_logo-spin__3541A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"\\\"../styles/buttons.css\\\"\",\"primary-button\":\"buttons_primary-button__IOK7z forms_reset-button__2iFIj forms_reset__1V6ZI buttons_button-text__2idq6\",\"forms\":\"\\\"../styles/forms.css\\\"\",\"reset-button\":\"forms_reset-button__2iFIj forms_reset__1V6ZI\",\"button\":\"UseCache_button__1LgWJ forms_reset-button__2iFIj forms_reset__1V6ZI\"};","export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react';\nimport styles from './AppHeader.module.css'\n\nimport logo from '../logo.svg';\nimport { UseCache } from './';\n\nexport const AppHeader: React.FunctionComponent = () => {\n\n    return (\n      <header className={styles.main}>\n        <img src={logo} className={styles.logo} alt=\"logo\" />\n        <UseCache/>\n      </header>\n    );\n}\n\nexport default AppHeader;","import React, { useState, useEffect } from \"react\";\n\nimport styles from \"./UseCache.module.css\";\n\nexport const UseCache: React.FunctionComponent = () => {\n  const [isEnabled, setIsEnabled] = useState(true);\n\n  useEffect(() => {\n    // Update the document title using the browser API\n    document.title = `[Cache ${isEnabled ? \"Enabled\" : \"Disabled\"}]`;\n  });\n\n  const toggleCache = () => {\n    setIsEnabled(!isEnabled);\n\n    // caches.delete()\n  }\n\n  return (\n      <button className={styles.button} onClick={toggleCache}>Toggle Cache</button>\n  );\n}\n\nexport default UseCache;\n","import './App.css';\n\nimport { AppHeader } from './components';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppHeader/>\n      <div className=\"App-body\">\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\n\nexport function register(config?: Config) {\n  /* disabled for local dev/test\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n  */\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/serviceworkers/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl, { scope: './' })\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  console.log(swUrl);\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceworkers/serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}